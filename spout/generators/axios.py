"""Axios-based TypeScript client generator."""

from typing import List

from ..models.endpoint import Endpoint, ParameterType
from .base import BaseClientGenerator


class AxiosClientGenerator(BaseClientGenerator):
    """Generator for axios-based TypeScript clients."""

    def generate(self, endpoints: List[Endpoint]) -> str:
        """Generate axios-based TypeScript client."""
        parts = [
            "// Generated TypeScript client using axios",
            "// This file was automatically generated by Spout",
            "",
            "import axios, { AxiosInstance, AxiosRequestConfig } from 'axios';",
            "",
        ]

        # Add types if requested
        types_section = self._generate_types(endpoints)
        if types_section:
            parts.append(types_section)

        # Add configuration interface
        parts.extend(
            [
                "export interface ApiConfig {",
                f"  baseURL?: string;",
                "  headers?: Record<string, string>;",
                "  timeout?: number;",
                "}",
                "",
                "export class ApiClient {",
                "  private client: AxiosInstance;",
                "",
                "  constructor(config: ApiConfig = {}) {",
                "    this.client = axios.create({",
                f"      baseURL: '{self.base_url}',",
                "      timeout: 10000,",
                "      headers: {",
                "        'Content-Type': 'application/json',",
                "      },",
                "      ...config,",
                "    });",
                "  }",
                "",
            ]
        )

        # Generate methods for each endpoint
        for endpoint in endpoints:
            method_code = self._generate_endpoint_method(endpoint)
            parts.append(method_code)
            parts.append("")

        parts.append("}")

        return "\n".join(parts)

    def _generate_endpoint_method(self, endpoint: Endpoint) -> str:
        """Generate a method for a single endpoint."""
        method_name = self._sanitize_method_name(endpoint.typescript_method_name)

        # Separate parameters by type
        path_params = [
            p for p in endpoint.parameters if p.parameter_type == ParameterType.PATH
        ]
        query_params = [
            p for p in endpoint.parameters if p.parameter_type == ParameterType.QUERY
        ]
        body_params = [
            p for p in endpoint.parameters if p.parameter_type == ParameterType.BODY
        ]

        # Build parameter list
        params = []
        for param in path_params + query_params:
            optional = "?" if not param.required else ""
            params.append(f"{param.name}{optional}: {param.type}")

        if body_params:
            # For body parameters, create a single data object
            if len(body_params) == 1:
                param = body_params[0]
                optional = "?" if not param.required else ""
                params.append(f"data{optional}: {param.type}")
            else:
                # Multiple body parameters - create an object type
                body_props = []
                for param in body_params:
                    optional = "?" if not param.required else ""
                    body_props.append(f"{param.name}{optional}: {param.type}")
                params.append(f"data: {{ {'; '.join(body_props)} }}")

        # Add optional config parameter
        params.append("config?: AxiosRequestConfig")
        param_str = ", ".join(params)

        # Determine return type
        if endpoint.responses:
            return_type = endpoint.responses[0].type
        else:
            return_type = "any"

        # Build method signature
        lines = []
        if endpoint.description:
            lines.append(f"  /**")
            lines.append(f"   * {endpoint.description}")
            lines.append(f"   */")

        lines.append(f"  async {method_name}({param_str}): Promise<{return_type}> {{")

        # Build path with parameter substitution
        path = endpoint.path
        for param in path_params:
            path = path.replace(f"{{{param.name}}}", f"${{{param.name}}}")

        lines.append(f"    const url = `{path}`;")

        # Build axios config
        lines.append("    const requestConfig: AxiosRequestConfig = {")
        lines.append(f"      method: '{endpoint.method.lower()}',")
        lines.append("      url,")

        # Add query parameters
        if query_params:
            lines.append("      params: {")
            for param in query_params:
                if param.required:
                    lines.append(f"        {param.name},")
                else:
                    lines.append(
                        f"        ...(({param.name} !== undefined) && {{ {param.name} }}),"
                    )
            lines.append("      },")

        # Add body data
        if body_params:
            lines.append("      data,")

        lines.append("      ...config,")
        lines.append("    };")
        lines.append("")
        lines.append(
            f"    const response = await this.client.request<{return_type}>(requestConfig);"
        )
        lines.append("    return response.data;")
        lines.append("  }")

        return "\n".join(lines)
